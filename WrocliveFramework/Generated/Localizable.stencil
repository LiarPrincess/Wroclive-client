// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
// If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.

// swiftlint:disable nesting
// swiftlint:disable vertical_whitespace
// swiftlint:disable explicit_type_interface
// swiftlint:disable identifier_name
// swiftlint:disable type_body_length
// swiftlint:disable line_length
// swiftlint:disable trailing_newline

{% if tables.count > 0 %}
import Foundation

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    _ p{{forloop.counter}}: {{type}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    p{{forloop.counter}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item sp %}
{{sp}}  {% for string in item.strings %}
{{sp}}  {% if not param.noComments %}
{{sp}}  /// {{string.translation}}
{{sp}}  {% endif %}
{{sp}}  {% if string.types %}
{{sp}}  static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
{{sp}}    return {{enumName}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
{{sp}}  }
{{sp}}  {% else %}
{{sp}}  static let {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{enumName}}.tr("{{table}}", "{{string.key}}")
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}

{{sp}}  enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call recursiveBlock table child sp2 %}
{{sp}}  }
{{sp}}  {% endfor %}
{% endmacro %}

{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
public enum {{enumName}} {
  {% if tables.count > 1 %}
  {% for table in tables %}
  enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
  	{% call recursiveBlock table.name table.levels "  " %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels "" %}
  {% endif %}
}

// MARK: - Helpers

private final class BundleToken { }

extension {{enumName}} {

  public enum Locale {
    case base
    case pl

    private static var plLocale: Foundation.Locale?
    private static var plBundle: Foundation.Bundle?

    fileprivate var locale: Foundation.Locale {
      switch self {
      case .base:
        return Foundation.Locale.current
      case .pl:
        let result = Self.plLocale ?? Foundation.Locale(identifier: "pl")
        Self.plLocale = result
        return result
      }
    }

    fileprivate var bundle: Bundle {
      switch self {
      case .base:
        return Bundle(for: BundleToken.self)
      case .pl:
        let result = Self.plBundle ?? Self.createBundle(language: "pl")
        Self.plBundle = result
        return result
      }
    }

    private static func createBundle(language: String) -> Bundle {
      let language = language == "en" ? "Base" : language
      let frameworkBundle = Bundle(for: BundleToken.self)

      guard let path = frameworkBundle.path(forResource: language, ofType: "lproj") else {
        fatalError("Unable to find '\(language).lproj'")
      }

      guard let bundle = Bundle(path: path) else {
        fatalError("Unable to create bundle for '\(path)'")
      }

      return bundle
    }
  }

  private static var locale = Locale.base

#if DEBUG
  /// This will only affect UI text! Nothing else!
  public static func setLocale(_ value: Locale) {
    Localizable.locale = value
  }
#endif

  private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
    let bundle = Localizable.locale.bundle
    let locale = Localizable.locale.locale

    let format = NSLocalizedString(key,
                                   tableName: table,
                                   bundle: bundle,
                                   comment: "")
    return String(format: format, locale: locale, arguments: args)
  }
}

{% else %}
// No string found
{% endif %}
