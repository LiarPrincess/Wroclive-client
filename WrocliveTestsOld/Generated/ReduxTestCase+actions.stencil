// sourcery:file:ReduxTestCase+Actions.swift
// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length
// swiftlint:disable vertical_whitespace

{% macro getName type %}{{ type.name|replace:"Action","" }}{% endmacro %}

import WrocliveFramework

extension ReduxTestCase {

  {% for type in types.enums|annotated:"action" %}
  // MARK: {{ type.name }}

  {% for case in type.cases %}
  {% if case.associatedValues.count == 0 %}
  {# If we do not have associated values then just return true/false #}
  func is{% call getName type %}{{ case.name|upperFirstLetter }}Action(at index: Int) -> Bool {
    guard index < self.dispatchedActions.count else { return false }
    switch self.dispatchedActions[index] {
    case {{ type.name }}.{{ case.name }}: return true
    default: return false
    }
  }
  {% elif case.associatedValues.count == 1 %}
  {# If we have single associated value then just return it #}
  func get{% call getName type %}{{ case.name|upperFirstLetter }}Action(at index: Int) -> {{ case.associatedValues.first.typeName }}? {
    guard index < self.dispatchedActions.count else { return nil }
    switch self.dispatchedActions[index] {
    case let {{ type.name }}.{{ case.name }}(value): return value
    default: return nil
    }
  }
  {% else %}
  {# If we have multiple associated values then return them as tuple #}
  func get{% call getName type %}{{ case.name|upperFirstLetter }}Action(at index: Int) -> ({% for associated in case.associatedValues %}{{ associated.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %})? {
    guard index < self.dispatchedActions.count else { return nil }
    switch self.dispatchedActions[index] {
    case let {{ type.name }}.{{ case.name }}({% for associated in case.associatedValues %}value{{ forloop.counter0 }}{% if not forloop.last %}, {% endif %}{% endfor %}): return ({% for associated in case.associatedValues %}value{{ forloop.counter0 }}{% if not forloop.last %}, {% endif %}{% endfor %})
    default: return nil
    }
  }
  {% endif %}

  {% endfor %}
  {% endfor %}
}

// sourcery:end
