// sourcery:file:AppEnvironment.swift

// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
// If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.

import Foundation
import os.log

{% macro getName type %}{{ type.name|replace:"Manager",""|lowerFirstLetter }}{% endmacro %}
{% macro getProtocol type %}{{ type.name }}Type{% endmacro %}

enum AppEnvironment {
  {% for manager in types.all|annotated:"manager" %}
  static var {% call getName manager %}: {% call getProtocol manager %} { return current.{% call getName manager %} }
  {% endfor %}
  static var variables: EnvironmentVariables { return current.variables }

  private static var stack: [Environment] = []

  static var current: Environment {
    precondition(stack.any, "Attempting to use empty environment stack.")
    return stack.last!
  }

  static func pushDefault() {
    push(
    {% for manager in types.all|annotated:"manager" %}
      {% call getName manager %}: {{ manager.name }}(),
    {% endfor %}
      variables: EnvironmentVariables(),
      log: OSLog(subsystem: Bundle.main.bundleIdentifier!, category: "main")
    )
  }

  static func push(
  {% for manager in types.all|annotated:"manager" %}
    {% call getName manager %}: {% call getProtocol manager %} = current.{% call getName manager %},
  {% endfor %}
    variables: EnvironmentVariables,
    log: OSLog) {

    push(
      Environment(
      {% for manager in types.all|annotated:"manager" %}
        {% call getName manager %}: {% call getName manager %},
      {% endfor %}
        variables: variables,
        log: log
    ))
  }

  static func push(_ environment: Environment) {
    stack.append(environment)
  }

  static func pop() {
    _ = stack.popLast()
  }
}

// sourcery:end
